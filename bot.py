from peewee import *
from config import *
from telegram import (ReplyKeyboardMarkup)
from telegram.ext import (Updater, CommandHandler, MessageHandler, Filters, RegexHandler,
                          ConversationHandler)
import json
import datetime
import logging
import botan

# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logger = logging.getLogger(__name__)

# –•—ç—à –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –ë–î –≤–æ –≤—Ä–µ–º—è –¥–∏–∞–ª–æ–≥–∞
querys = {}  

WEEK, GROUP, COURSE, DAY = range(4)

def splitArr(arr, size):
     arrs = []
     while len(arr) > size:
         pice = arr[:size]
         arrs.append(pice)
         arr   = arr[size:]
     arrs.append(arr)
     return arrs

def next_weekday(d, weekday):
    days_ahead = weekday - d.weekday()
    if days_ahead <= 0: # Target day already happened this week
        days_ahead += 7
    return d + datetime.timedelta(days_ahead)

# –í–µ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def get(bot, update):
    id = update.message.chat_id
    querys[id] = {}
    reply_keyboard = [['–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è'],['–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è']]
    bot.sendMessage(update.message.chat_id,
                    text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é üóì',
                    reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))
    
    botan.track(token=botan_token, uid=update.message.from_user.id, message=update.message.text, name='Get Schedule')

    return WEEK


def week(bot, update):
    id = update.message.chat_id
    text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –Ω–µ–¥–µ–ª–∏
    # –ü—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –≤–≤–æ–¥–µ –æ—Ç–º–µ–Ω—è–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
    continueConv = False
    if text == '–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è':
        dateStart = datetime.date.today()
        dateStart = dateStart - datetime.timedelta(days=dateStart.weekday())
        dateEnd = dateStart + datetime.timedelta(days=6)
        querys[id]['week'] = [dateStart,dateEnd]
        isExists = Schedule.select().where(Schedule.middleDate.between(dateStart,dateEnd)).exists()
        if isExists:
            continueConv = True
        else:
            bot.sendMessage(update.message.chat_id,
                        text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
            
    elif text == '–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è':
        dateNow = datetime.date.today()
        dateStart = next_weekday(dateNow,0)
        dateEnd = next_weekday(dateStart,6)
        querys[id]['week'] = [dateStart,dateEnd]
        isExists = Schedule.select().where(Schedule.middleDate.between(dateStart,dateEnd)).exists()
        if isExists:
            continueConv = True
        else: 
            bot.sendMessage(update.message.chat_id,
                        text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
                        reply_markup=ReplyKeyboardMarkup(schelude_keyboard, one_time_keyboard=True))
    if continueConv:
        reply_keyboard = [["–ò–°","–ö"],["–ì","–†"],["–ë","–Æ"],["–¢–û–ü"]]
        bot.sendMessage(update.message.chat_id,
                        text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å üïµ',
                        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))
        return GROUP
    else:
        return ConversationHandler.END

    

def group(bot, update):
    id = update.message.chat_id
    text = update.message.text
    
    # –î–æ—Å—Ç–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –∏
    # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
    querys[id]['group'] = update.message.text
    courses = Schedule.select().where(Schedule.middleDate.between(querys[id]['week'][0],querys[id]['week'][1])).get().data
    courses = json.loads(courses)
    coursesArr = []
    for course in courses:
        if querys[id]['group'] in course:
            coursesArr.append(course)
    reply_keyboard = splitArr(coursesArr,2)
    bot.sendMessage(update.message.chat_id,
                    text='–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É üéì',
                    reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))

    return COURSE

def course(bot, update):
    id = update.message.chat_id
    text = update.message.text
    querys[id]['course'] = update.message.text
    reply_keyboard = [['–ü–ù',"–í–¢"],["–°–†","–ß–¢"],["–ü–¢","–í—Å—è –Ω–µ–¥–µ–ª—è"]]
    bot.sendMessage(update.message.chat_id,
                    text='–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–±–Ω—ã–π –¥–µ–Ω—å üìÖ',
                    reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))
    return DAY

def day(bot, update):
    id = update.message.chat_id
    text = update.message.text
    querys[id]['day'] = update.message.text
    courses = Schedule.select().where(Schedule.middleDate.between(querys[id]['week'][0],querys[id]['week'][1])).get().data
    courses = json.loads(courses)
    # –°–∞–º–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    outTxt = ''
    try:
        if querys[id]['day'] == '–í—Å—è –Ω–µ–¥–µ–ª—è':
            daysArrs = ['–ü–ù','–í–¢','–°–†','–ß–¢','–ü–¢']
            for day in daysArrs:
                outTxt += '\nüìÖ{}üìÖ'.format(day)
                subCount = 1
                for subject in courses[str(querys[id]['course'])][day]:
                    if len(subject) > 1:
                        outTxt += '\n{0}: {1}\n    üë§{2}'.format(subCount, subject[0],subject[1])
                    else:
                        outTxt += '\n {0}'.format(subject[0])
                    subCount += 1
        else:
            outTxt += '\nüìÖ{}üìÖ'.format(querys[id]['day'])
            subCount = 1
            for subject in courses[str(querys[id]['course'])][str(querys[id]['day'])]:
                if len(subject) > 1:
                    outTxt += '\n{0}: {1}\n    üë§{2}'.format(subCount, subject[0],subject[1])
                else:
                    outTxt += '\n {0}'.format(subject[0])
                subCount += 1
    except Exception as e:
        logging.exception("message")

    # –û—á–∏—â–∞–µ–º —Ö—ç—à —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
    querys[id] = None
    
    bot.sendMessage(update.message.chat_id,
                    text=outTxt,
                    reply_markup=ReplyKeyboardMarkup(schelude_keyboard, one_time_keyboard=True))

    return ConversationHandler.END

def error(bot, update, error):
    logger.warn('Update "%s" caused error "%s"' % (update, error))

# –î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—è–µ—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ /cancel
def cancel(bot, update):
    bot.sendMessage(update.message.chat_id,
                    text='–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')

    return ConversationHandler.END

# –ü–æ–¥–ø–∏—Å–∫–∞
def subscribe(bot, update):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    # –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    # —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    exists = Follower.select().where(
        Follower.chatId == update.message.chat_id).exists()
    if exists:
        isAcitve = Follower.select().where(                     #–ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞,
        Follower.chatId == update.message.chat_id).get().active #—Ç–æ –æ–ø–æ–≤–µ—â—è–µ–º
        if isAcitve:
            bot.sendMessage(update.message.chat_id,
                            text='–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.\n–ú–æ–∂–Ω–æ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /unsubscribe',
                    reply_markup=ReplyKeyboardMarkup(schelude_keyboard, one_time_keyboard=True))
        else:
            subQuery = Follower.update(active=True).where(Follower.chatId == update.message.chat_id)
            subQuery.execute()
            bot.sendMessage(update.message.chat_id,
                        text='–¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.'+
                             '\n–ú–æ–∂–Ω–æ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /unsubscribe',
                    reply_markup=ReplyKeyboardMarkup(schelude_keyboard, one_time_keyboard=True))
    else:
        Follower.create(name= update.message.chat.username,chatId=update.message.chat_id, active=True)
        bot.sendMessage(update.message.chat_id,
                        text='–¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.'+
                             '\n–ú–æ–∂–Ω–æ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /unsubscribe',
                    reply_markup=ReplyKeyboardMarkup(schelude_keyboard, one_time_keyboard=True))
    botan.track(token=botan_token, uid=update.message.from_user.id, message=update.message.text, name='Subscribe')

# –û—Ç–ø–∏—Å–∫–∞
def unsubscribe(bot, update):
    exists = Follower.select().where(
        Follower.chatId == update.message.chat_id).exists()
    if exists:
        isAcitve = Follower.select().where(
        Follower.chatId == update.message.chat_id).get().active
        if isAcitve:
            ubsubQuery = Follower.update(active=False).where(Follower.chatId == update.message.chat_id)
            ubsubQuery.execute()
            bot.sendMessage(update.message.chat_id,
                        text='–¢–µ–ø–µ—Ä—å –≤—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.\n–ú–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /subscribe')
        else:
           bot.sendMessage(update.message.chat_id,
                        text='–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n–ú–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /subscribe')

    else: 
        bot.sendMessage(update.message.chat_id,
                        text='–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n–ú–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /subscribe')
    botan.track(token=botan_token, uid=update.message.from_user.id, message=update.message.text, name='Unsubscribe')

# –ö–æ–º–∞–Ω–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –ø–æ–º–æ—â–∏
def start(bot, update):
    bot.sendMessage(update.message.chat_id,
                    text='–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –í–æ–ª–æ–≥–æ–¥—Å–∫–æ–≥–æ –ö–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ö–æ–ª–ª–µ–¥–∂–∞ ü§ñ'+
                         '\n–û—Ç –º–µ–Ω—è —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –∏–ª–∏ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /get'+
                         '\n–ï—â–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–≤–Ω–æ–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /subscribe')
    botan.track(token=botan_token, uid=update.message.from_user.id, message=update.message.text, name='Start')

def help(bot, update):
    bot.sendMessage(update.message.chat_id,
                    text='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:'+
                         '\n/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'+
                         '\n/unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'+
                         '\n/get - –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'+
                         '\n/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é')
    botan.track(token=botan_token, uid=update.message.from_user.id, message=update.message.text, name='Help')


class BotThread:
    def __call__(self):
        updater = Updater(token)

        dp = updater.dispatcher

        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('get', get)
            ,RegexHandler('^(–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ|–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ|—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ|üìã –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìã)$', get)],

            states={
                WEEK: [MessageHandler([Filters.text], week)],
                GROUP: [MessageHandler([Filters.text], group)],
                COURSE: [MessageHandler([Filters.text], course)],
                DAY: [RegexHandler('^(–ü–ù|–í–¢|–°–†|–ß–¢|–ü–¢|–í—Å—è –Ω–µ–¥–µ–ª—è)$', day)]
            },

            fallbacks=[CommandHandler('cancel', cancel)]
        )
        
        dp.add_handler(conv_handler)
        dp.addHandler(CommandHandler('help', help))
        dp.addHandler(CommandHandler('start', start))
        dp.addHandler(CommandHandler('subscribe', subscribe))
        dp.addHandler(CommandHandler('unsubscribe', unsubscribe))

        dp.add_error_handler(error)

        updater.start_polling()

        updater.idle()
